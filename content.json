{"pages":[{"title":"404","text":"","link":"/404.html"},{"title":"關於我","text":"Yinmin-86/10/3-2020 年六月即將從臺中科技大學畢業-六角實習生-喜歡閱讀、攝影 寫文章是為了訓練自己的表達練習把困難的事講清楚 部落格名稱由來原以為架設過程會很困難，但沒想到想一個自己的網站名稱才是最難的事，同事原本以我的英文名字 Alice 提出一連串愛麗絲為開頭的取名（接著是英文版又刷一遍），但不想走一個太夢幻的風格，還是更喜歡簡單好記好介紹，同事甚至提醒我在面試介紹自己的 blog 時要講的出口，不要取什麼 22 歲少女工程師這種羞恥名字（ig 前端分享的帳號名稱一直被嫌棄）讓我光是想名稱就花了一個禮拜，最後還是決定用自己中文的名字「穎旻」的英文翻譯（笑） 好友連結Ray","link":"/about/index.html"}],"posts":[{"title":"Flex 修煉時光屋","text":"哈囉，我是穎旻！上個月有了一個新身份，就是我成為六角的助教了！如果有參與網頁切版直播課程的人應該會一直看到我的名字看了將近一個月的作業後也看出一些心得來，於是想和你們分享在 Flex 的作業中一些小細節和技巧，也有助於大家最近開始做的任務唷，有興趣的話就繼續看下去摟～ 排版的常見問題先來講講在看 Flex 修煉時光屋的作業時發現很多人會有的主要問題 把內容的高度寫死 123.content { height: 798px;} （然後就可以看到各種很奇怪的數字 但不難想像大家這樣做的原因，因為設計稿會有明確的 px，所以很多人就會依照設計稿的數字去做設定，不是說這樣不對，只是不是每個地方都能這樣做，常常會看到的問題是將整塊內容的高度寫死，為了讓下方有多餘的空間來讓畫面和設計稿看起來一致，但其實那些應該留白的區域不是透過設定固定高度跑出來的，正確應該是用 margin 和 padding 做推移，除了內容撐開的高度外，能讓多餘的空間產生出來 但當大家學會不要寫死高度開始使用 margin 和 padding 做推移時，又會看到下方的程式碼 想用 margin 或 padding 把目標移到各種位置 123.logo { padding: 224px 149px 267px;} 有寫過這種奇怪數字的人可以自首XD 而且不難想像還為了要對準，使用 f12 的工具狂加數字 通常會這樣寫遇到比較多是希望讓目標可以置中（但置中的方法這麼多就是不要這樣用R） 剛剛第一點最後有說到使用 margin 和 padding 的時機是讓多餘的空間產生出來，不是為了讓目標推移到你想要的位置去，如果是這樣的寫法在日後學 RWD 的時候就會發現怎麼寫都會跑版，還要花時間重寫，所以可以多使用 flex 去做這些排版，不要用推移的方式做出排版的效果唷～ 最後可能會出現第三種問題 我已經用 flex 做到置中，但是上下還是需要留白呀，那我可以寫死高度嗎？ 不行！不行！不行！很重要所以說三次 這樣其實只是回到第一個問題而已XD 如果要留白就使用 margin 或 padding 做推移吧！詳細應用可以參考下方 關卡 2 雙欄排版 的細節分享，正確使用 flex 搭配 padding 2.濫用 div 標籤 在關卡 1、3、4、5、7、9、10，都是可以使用 ul li 排版的，其中在關卡 3、4、7、10 中都是選單，這邊大家都會記得要用 ul li 結構很棒～～但是在關卡 1、5、9 的排版方式大家就會忘記可以使用 ul li 取代 div，這部分就是可以訓練大家在看設計稿時就先想架構，漸漸就能寫出符合語意的程式碼了另外還有遇到一種，知道要用 ul li 但外面又包了一層 div 123456&lt;div class=&quot;card-list&quot;&gt; &lt;ul&gt; &lt;li&gt;...&lt;/li&gt; &lt;li&gt;...&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt; 這樣使用 ul 在語意方面好像就沒什麼意義了，所以就會建議把 div 移除，然後把 class 屬性放在 ul 上。遵循標籤的語意化不但有利於網頁的 SEO，還有一個很大的優點就是讓過兩個月之後的你打開檔案還能看得出來自己當初在寫什麼。試想看看自己打開檔案後外層幾乎都是用 div 去包，於是只好透過 class 名稱推敲，會好好寫 class 名稱的人大概會出現像是 list 或 item 之類的字，但是如果還不太會命名的寫出來的就有各種可能，只會越看越混亂啊勞勞 這兩個問題是每天看作業時都會遇到的，其實在剛接觸網頁的人都一定寫過類似的程式碼（我自己也寫過哈哈哈），但透過老師和各位助教的指導就可以加速觀念的吸收，幫助各位寫出更棒的程式碼喔～～ 關卡細節分享看完常見問題後，大家應該都很有共鳴吧！！接著要來分享關卡 2～4 中你可能沒注意到的小細節 關卡 2 雙欄排版 在這關就可以呼應上方的兩個問題，看圖可以發現兩個重點 兩塊都有上下的留白空間 左邊區塊的內容要置中 這裡很多人會為了製造留白空間所以寫死高度，但是會比較建議在右邊的區塊使用 padding 去推 這時候可能會有人想問，為什麼是選擇只推右邊區塊？ 先說明外層有使用 flex 讓兩塊並排，所以兩塊都會有等高的效果，然後因為右邊區塊的內容是文字，在文字使用 padding 的話可以確定文字間距是固定的，當上下都推出適當的高度後，左邊的區塊就會依照右邊的高度去做到等高，解決高度問題後，接下來就是左邊區塊的內容要置中 可以使用 flex 垂直水平置中的方法 123display: flex;justify-content: center;align-items: center; 這裡可以參考葉子的範例程式碼，在關卡 8 也是使用類似的觀念 關卡 3 雙欄選單設計 這關想分享的是 menu 區塊 — 兩種置中方法 照理來說這塊因為是垂直排列，所以不會用到 flex，很多人會直接使用 text-align: center ，但有個問題是最後一個 li 不像前三個都是四個字，所以用 text-align: center 只有他不會呈現靠左對齊，為了讓 ul 整塊置中還要讓文字使用預設的靠左對齊 (不使用 center)，利用 flex 可以輕鬆做到 12345.menu { display: flex; flex-direction: column; align-items: center;} 不過也有不使用 flex 的置中方式 1234.menu ul { margin: 0 auto; width: 50%;} 關卡 4 表頭表尾設計 這關想分享的是上方的 menu 區塊 — 四個 a 連結產生間距的方法這邊要注意的是 .menu 可以靠內容和 padding 撐開，不要寫死高度 在 .menu 使用 flex-wrap:wrap 可以讓畫面縮小時不要跑版 Codepen 示範連結 第一種方式：設定 li 的寬度並在 a 標籤中使用 text-align:center第二種方式：li+li 的方式，可以在每個 li 後面使用 margin-left 推移第三種方式：在 a 標籤中使用 padding 把左右間距推開 學員作業分享有學員提到說寫完後有再去參考別人的作業，但是量實在太多了不知道要看誰的比較好所以我就來分享兩個我目前看完覺得寫得還不錯的作業，我會列出他們的優點給大家參考～ 網頁連結 1.徐純純 （使用 pug + sass）2.Alen Su 優點： flex 寫得不錯 HTML 結構寫得不錯 命名有規劃 會把重複性高的 CSS 整理在一起 有做細節處理 例如：hover 樣式 畫面還原度高 CSS 都有按照名稱順序排列，讓我在看作業的時候很方便對照 (感動) 另外也蠻喜歡學員針對我提供的建議給我一些回饋或再次發問，因為我給的建議不一定每次都是最正確的，如果能夠提供你為什麼這樣做的方法，我們或許可以討論出更好的寫法，這樣對我來說也可以學到不同的思維，在後面就能提供給其他學員參考了～ 總結如果還有其他關卡想看細節分享的，可以再留言告訴我喔～ 或是你有更好的想法也歡迎在 slack 上一起討論！ 建議大家在開始寫之前可以先去參考已完成任務的人的作業建議，好處是可以避免去犯和其他人同樣的錯誤，這樣助教和老師可以更專注在其他細節上，或許能夠給你更多不同的建議哩 最後最後，切版直播班的第一週任務開始啦～幫大家加油！！希望這篇文章有幫助到你～","link":"/f2e/20200412/393573562/"},{"title":"分享一個月內使用新技術完成作品-火箭隊培訓營","text":"我是穎旻，目前是快要大學畢業的學生，正在學習前端的漫漫長途中，你好你好！這是我的第一篇文章，我想分享自己待在高雄的工程師培訓營中經歷一個半月專案的實作過程。 前言火箭隊培訓營「火箭隊培訓營」是由 廖洧杰 和 Justin 兩位老師在高雄創辦的線下實體工程師培訓營，主要培育前後端人才，過程全程免費。當初知道有這個培訓營時覺得老師太佛心了！ 後來才知道原來其他地方也有人在做類似的事，像是在台南的好想工作室、台北的 AppWorks School 和 CMoney。只是每個培訓營最終的目的不一定相同，火箭隊最終是希望能協助轉職，所以在挑選人和規劃學員的學習路線時就會有一些不同。 目前火箭隊正在招募第五、六梯成員，如果有興趣的人們可以參考下面的資訊，錯過的話也可以先 follow FB 粉專 ，最新資訊都可以在這裡看到。 報名資訊詳細資訊 我在火箭隊的生活通常學員會駐點學習至少半年，最終會產出一個面試作品。但我因為某些原因所以在最後一個月才加入，沒有參與到前半部面試和學習的過程，只有完成最終的作品，所以若想知道面試和學習過程，可以參考第一梯學員，宜蓁的文章。 此篇主要著重在作品的產生過程以及一個月內學習一項新技術的方法。 作品會讓前端與後端搭配一起完成，但因為我最慢進來，大家都已經有各自的夥伴了，於是我只好自己完成我的（哭）。 也因為我沒有後端，洧杰老師建議我可以使用 Json server 來快速建立簡單的 Rest API。 一開始想題目時，我從自己生活上的經驗去尋找靈感，一共想了五個。與老師討論過後，覺得自己對第一個比較有共鳴和想法，主題是線上租屋，於是 Homie 就這樣誕生啦～～！ 時程規劃在時程方面，進來的時間是2/10，得知 3/27 就要發表作品，大約有一個半月的時間。我花了將近兩週學習 Vue，一週做小練習。剩下的時間切分為三個階段，中後期著重在開發平台上。 新技術的學習方法在講學習一項新技術前，先說明一下這次專案使用的技術是前端框架 Vue。我在來火箭隊之前已經碰過大約半年的 React，也有一些開發經驗（之後可以分享兩者的差別，被問到爛了～～～），但我在學習的過程中覺得很挫折，主要是因為對 Javascript 的認識不夠深，於是學習到一半又重新看了六角學院的 Javascript 課程，所以這次在學習 Vue 時我就更重視自己學習的效果。在洧杰老師的我在火箭隊學到突破程式邏輯的四種方法（這篇很值得閱讀）的文中有提到，探索適合自己的學習吸收方式，沒辦法只透過一個教材就能夠解決學員全部的問題，複合式的學習方式才能根據每個人的能力去有效吸收內容。 主要的學習資源＋第二個輔助學習的資源＋實作 於是根據上面的方法，我也找出適合自己的學習模式。已經習慣看線上課程自學的我，選擇看六角的 Vue 課程來當作我主要學習的資源，另外一邊做筆記，在不懂的地方就會搭配一些相關主題的技術文章（輔助學習），有時候還能從別人的文章內學到更多呢！像我在看到 Component 元件的章節時就卡了一段時間，覺得懂了但又常常在看老師的程式碼時失去方向，後來參考了別人在 iT 邦幫忙鐵人賽分享的文章才又更了解 Vue 中元件傳遞的原理，最後透過實作 todolist 的方式驗證自己是否真的學會。或許用這樣的方法會讓學習過程很漫長，但是要真的學會不能只是「大略懂」，不然就會遭遇像我前面的慘痛經驗。或許會有人想知道要如何確定自己都學會了？答案真的就是透過實作。 實作的目的是了解自己學習和理解的內容是否有被正確應用，所以如果在實作過程中發現還是很卡的話，找出卡住的地方，再針對那部分加強就可以了:D 在時程上有限制時，我會訂定自己每週的學習目標，透過任何可以記錄的軟體都可以，這部分之前嘗試了很久才找到最適合自己訂定目標的方式，直接說重點就是： 目標不要一下訂得太大、越細節越好 每天都回報自己的進度來看能否符合這週的最終目標，若沒辦法的話該怎麼做調整 養成習慣後就成了我每天睡前要做的事。 學習新技術是很艱辛的過程，不斷在「碰壁」和「了解」中循環，但是當你有相對的作品產出時，就會覺得一切很值得，因為做出來的東西是自己辛苦的結晶，並且也能增加自己的信心去面對更難的挑戰，總之這次嘗試的學習方式，效果還不錯～ 總結 短短一個半月學了很多新東西，一開始有些無法負荷，但現在慶幸有這些壓力可以逼迫自己不斷學習。在火箭隊，很喜歡的是大家會互相討論問題，一個人自學和大家一起學的感覺很不一樣，因為知道彼此都在相同的道路上，有問題都能夠互相幫忙互相加油，所以更有堅持下去的動力。恭喜大家最後都順利的畢業啦！ 然後想要特別感謝 Ray，在我一個人做專案的過程中幫助我許多，邏輯卡住時，教我怎麼整理自己的思緒，遇到程式碼跑不出來還怎麼看都找不到原因時，教我一步步 debug，分析有可能的問題，重點是你總是很耐心講到我真的聽懂（感動落淚），雖然最後免不了還是要嗆我一下 XD 但我在問你問題的過程中，我也學習到把問題講到你可以一次了解，也從你改善我的程式碼中學到不同的思維和寫法，每次問問題都像在挖寶哈哈哈。 最後，若是看完我的分享對這個工程師培訓營有興趣的人，歡迎你加入火箭隊！一起發射火箭吧～～ 祝福大家都能轉職成功:D 第二梯其他學員的文章參考 Daniel — 飛出火箭隊 集點送紅利 / Hiro — 從自學到火箭隊 - 網頁心路歷程","link":"/share/20200403/1243066710/"},{"title":"Bootstrap 設計模式 - OOCSS","text":"前言說到 OOCSS 設計模式，最具代表的應用就是 Bootstrap 了！ 你可能會想，自己有需要學這個嗎？了解設計模式可以幹嘛呢？我自己在學習前端一陣子後已經能順利刻出想要的版型，也熟悉標籤的使用、了解語意化的重要，但是面對 CSS 卻一直沒有在進步的感覺，同樣的 CSS 會在不經意中重複使用好幾次、沒有一個規劃，後來因為接觸了不同的設計模式我才慢慢理解良好的設計模式可以幫助程式碼更容易維護甚至擴充，寫起來也會更順手，所以如果你也跟我一樣，可以一起來認識 OOCSS！ 如果你不清楚自己目前情況，可以透過範例來了解是否需要學習 範例一 想要給 card li 樣式時會用 .content .card li {...} 而不是 .card li {...} 123456&lt;div class=&quot;content&quot;&gt; &lt;ul class=&quot;card&quot;&gt; &lt;li&gt;...&lt;/li&gt; &lt;li&gt;...&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt; 應該很多人都有使用過這樣的寫法，覺得 .content .card li 權重分數較高，階層也不會過多，會用這種寫法其實很合理 範例二 會把一個東西的 CSS 都全塞在一個 class 裡面 1&lt;a class=&quot;btn&quot;&gt;123&lt;/a&gt; 12345678910.btn { display: block; color: white; background-color: blue; padding: 10px 20px; text-decoration:none; text-align:center; border-radius: 2px; cursor: pointer;} 如果以上兩種都是你目前使用的撰寫方式，那恭喜你可以繼續看下去了XD OOCSSOOCSS 是 Object Oriented CSS 的縮寫，是 CSS 的架構方法，在這個原則下撰寫的 CSS 具有以下特點： 容器與內容分離 結構與樣式分離 容器與內容分離 簡單來說， 內容 就是你的元件，而 容器 就是包住元件或其他內容的外層 當容器與內容分離時，容器的重用性就會變高、變彈性而不會受到命名的限制，例如： 12345678910&lt;div class=&quot;header&quot;&gt; &lt;ul class=&quot;menu&quot;&gt; &lt;li&gt;...&lt;/li&gt; &lt;li&gt;...&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;style&gt; .header .menu li {...}&lt;/style&gt; 12345678910&lt;div class=&quot;footer&quot;&gt; &lt;ul class=&quot;menu&quot;&gt; &lt;li&gt;...&lt;/li&gt; &lt;li&gt;...&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt;&lt;style&gt; .footer .menu li {...}&lt;/style&gt; 明明是同樣的內容，卻因為外層從 header 換成 footer 所以需要再寫一次 CSS於是我們利用容器和內容分離的概念，再重寫一次 123456789101112131415161718192021222324252627&lt;div class=&quot;container&quot;&gt;&lt;!--header--&gt;&lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-12&quot;&gt; &lt;ul class=&quot;menu&quot;&gt; &lt;li&gt;...&lt;/li&gt; &lt;li&gt;...&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; ... &lt;!--footer--&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-12&quot;&gt; &lt;ul class=&quot;menu&quot;&gt; &lt;li&gt;...&lt;/li&gt; &lt;li&gt;...&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;style&gt; .menu li {...}&lt;/style&gt; 可以發現改成分離的設計方式後 CSS 的部分是可以共用的 CSS 不再受到原本命名的限制，可以寫成 .menu li 而不是 .col-12 .menu li 綜合以上兩點，這時再回顧範例一的問題，你會寫 .content .card li {…} 還是 .card li {…} 呢？ 123456&lt;div class=&quot;content&quot;&gt; &lt;ul class=&quot;card&quot;&gt; &lt;li&gt;...&lt;/li&gt; &lt;li&gt;...&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt; 聰明的你理解過後就知道 .card li {…} 才是我們會選擇的，原因在於 content 是容器，所以不會去使用容器當命名的開頭，就像我們不會拿 .col 當開頭一樣 講完容器與內容分離的原理，我們來看 Bootstrap 是如何應用在元件上 Bootstrap 元件也可以分為容器與內容（容器可以包內容） 容器型元件：如 Grid、Card、Forms、 Modal … 內容型元件：如 Alerts 、 Badge 、Breadcrumb 、Buttons … Card 卡片：Card 是 容器 ，而 Button 屬於 內容 12345678&lt;div class=&quot;card&quot; style=&quot;width: 18rem;&quot;&gt; &lt;img src=&quot;...&quot; class=&quot;card-img-top&quot; alt=&quot;...&quot;&gt; &lt;div class=&quot;card-body&quot;&gt; &lt;h5 class=&quot;card-title&quot;&gt;Card title&lt;/h5&gt; &lt;p class=&quot;card-text&quot;&gt;Some quick example text to build on the card title and make up the bulk of the card&apos;s content.&lt;/p&gt; &lt;a href=&quot;#&quot; class=&quot;btn btn-primary&quot;&gt;Go somewhere&lt;/a&gt; &lt;/div&gt;&lt;/div&gt; List 列表：Card 是 容器 ，而 List 屬於 內容 123456789101112&lt;div class=&quot;card&quot; style=&quot;width: 18rem;&quot;&gt; &lt;img src=&quot;...&quot; class=&quot;card-img-top&quot; alt=&quot;...&quot;&gt; &lt;div class=&quot;card-body&quot;&gt; &lt;h5 class=&quot;card-title&quot;&gt;Card title&lt;/h5&gt; &lt;p class=&quot;card-text&quot;&gt;Some quick example text to build on the card title and make up the bulk of the card&apos;s content.&lt;/p&gt; &lt;/div&gt; &lt;ul class=&quot;list-group list-group-flush&quot;&gt; &lt;li class=&quot;list-group-item&quot;&gt;Cras justo odio&lt;/li&gt; &lt;li class=&quot;list-group-item&quot;&gt;Dapibus ac facilisis in&lt;/li&gt; &lt;li class=&quot;list-group-item&quot;&gt;Vestibulum at eros&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt; 看完容器與內容的部分，我們來拆解 Bootstrap 的元件 class 設計吧！ 結構與樣式分離使用 Iphone 的人應該有玩過或是看過 Animoji，他可以透過選擇臉部的器官來打造出自己的角色 你可以把原本所有器官的預設樣式想像成「結構」（左圖），結構是一個元件的基底（base）像是：寬度、圓角、字體大小等等 而你也可以選擇頭髮顏色、皮膚顏色等等的就是所謂的「樣式」（右圖），在 Bootstrap 按鈕元件中就是以顏色區分（包含字體顏色、背景顏色） 這時我們再回到一開頭的範例二 1&lt;a class=&quot;btn&quot;&gt;123&lt;/a&gt; 12345678910.btn { display: block; color: white; background-color: blue; padding: 10px 20px; text-decoration:none; text-align:center; border-radius: 2px; cursor: pointer;} 利用結構與樣式分離的概念，我們再重寫一次 1&lt;a class=&quot;btn btn-primary&quot;&gt;123&lt;/a&gt; 1234567891011121314.btn { display: block; padding: 10px 20px; text-decoration:none; text-align:center; border-radius: 2px; cursor: pointer;}.btn-primary{ color: white; background-color: blue; border: lightblue;} 應該有看到在 class 的部分多拆出了 btn-primary 他的優點是 按鈕需要換一個顏色，不需要先去找到那顆按鈕的 CSS 然後改掉顏色 當想要寫第二顆按鈕在他旁邊時，不再需要重複寫一堆類似的 CSS，而是把不一樣的部分抽離出來管理，一樣的部分就保留起來不會去動它 總結","link":"/css/20200603/1319604089/"},{"title":"2020春季網頁切版直播班-八週全記錄","text":"前言今天是切版直播班結業式，獲得老師頒發的最坦助教XD 也恭喜老師突破全台完課率，達到 55 %！ 後來去看 Excel 紀錄，我改了 264 份作業！！（雖然還有 20 份左右還沒看，等我～） 改過的學生名字我大約有印象，也去看了一些人的心得（有看的有拍手），於是也想記錄一下自己這兩個月的心得和成長，另外在文章後段也會分享每周作業中重要的觀念，大家可以藉這篇文章檢視自己是否都有達到目標喔～ 改作業的起點在直播班正式開始前，我負責的是前段的小練習和 Flex 作業，都不算一個完整的作品，在第一週開始的時候覺得自己沒跟著做過一遍會不知道要怎麼看常見的問題和要注意的地方，也比較難了解大家可能卡住的點，所以在前幾週週末我都在做大家的作業，就這樣大概跟了四週終於終於慢慢抓到訣竅 開始直播到了第二週因為老師想提供給大家更多的資源，所以我被老師半路推坑直播，我當下反應真的是「蛤？我嗎？」老師還笑著回答我「不然是誰XD」 驚喜驚嚇又有一點點的期待，因為知道自己不是很擅長講話，但又可以嘗試新的挑戰是難得有的機會，我的四月真的如同自己在三月底時的願望一樣，依舊充滿挑戰呀哈哈哈 還記得第一次直播完我馬上私訊洧杰說我講的爛爆了，那天直播緊張到不行，學生問我問題的時候都覺得腦袋一片空白，有時候是知道答案卻因為不知道怎麼表達讓我很困擾，臨時反應很差 老師午休時特地走過來跟我說沒關係啦，人生總是要挑戰一下沒做過的事麻！當下沒想很多只覺得很抱歉，吃午餐的時候腦袋空白到下午。後來想到這件事，覺得老師的鼓勵真的是很欣慰，讓我在之後的每週更認真準備內容，我也體認到自己的弱點和需要加強的觀念。第二週直播就順利非常多，時間掌控也抓得剛好，但那次應該真的只是剛好而已啦XD。 遇到困難第二週作業快速增長的時候我開始有改不完的情況，甚至讓學生等我超過三四天，洧杰那時候連假日都在改作業還幫我分擔了沒改完的部分。我也反省自己是不是看得太嚴格給通過的作業很少，導致學生修改時間被拉很長，我也要花大量的時間重新看，於是讓新的作業一直被等待批改，當時老師給了我一些改善的建議，並告訴我讓每位學生都能立即獲得回饋和鼓勵才是最重要的，也因為那次機會我重新調整自己的工作順序和心態，後來已經被大家練到一天可以看完十個左右惹 成長大約到第六週的時候，我有深刻感受到大家的程式碼都進步了，我自己也覺得有所收穫，透過改作業和回覆問題，我一直在學習理解每個人的思考邏輯、學習聆聽和想解決辦法。在技術上的成長是在第五週因為要開始使用 Gulp 和撰寫 SCSS，我在週末快速看完了這兩個六角課程，我才知道自己以前 SCSS 寫得有多爛哈哈哈，直播教學真的會使人成長，因為有責任在所以逼迫自己要達到一定的程度就會拼命學習，直播這件事也是，到後來 Ray 都說我開始可以很自然的跟大家聊天聊 20分鐘了（？是說很感謝你每個禮拜都幫我錄影剪片、開場半小時前和我對內容，讓我在直播時對自己有更多的自信。 因為早上直播的關係人數不多，所以也不知道有多少人會去看錄影，但老師後來跟我說蠻多人有在看，這件事才讓我開始覺得內容真的是對大家有幫助的，在第七週左右的時候我開始收到一些學生的回饋，有學生跟我說很多時候都是看完直播才知道怎麼開始寫作業，好感動喔嗚嗚QQ 因為每次直播完我也不太清楚大家吸收得如何，所以收到這樣的感謝真的很開心！ 另外也從老師身上學到很多教學的想法，因為目標是提升完課率和作業繳交率，中間就一直不斷地想出各種能鼓勵學生交作業的方法，每次洧杰來找我討論的時候都覺得老師真的是為這個直播班奉獻很多心力，真的很佩服他能想出這麼多招，包含最初規劃的 Boss 讓你身處打怪的遊戲體驗中、分組讓團隊合作解任務讓團員產生共患難感情進而鼓勵彼此到後來互相學習、團隊間的小小競賽、助教直播、後勤組範例給各位滿到爆的資源、影片觀看操作服務、雙倍爆擊、加開 DLC 直播（我也是就這樣再次被推下去的）最後甚至完成前四關有小禮物、六關能獲得加碼錄影等等…，大家還不寫爆作業！ 特別感謝英鳴（後勤組成員）自願擔任我的小幫手，在直播前都會問我有沒有哪些地方需要協助，有兩三次還跟我一起熬夜到兩點多，有一次就是很難的第三關啦～～more 的字特效就是他幫我做的！還有葉子，常常會問他一些版型問題也都很熱心幫我看，第三週的圖片因為遇到 flex 就無法正常縮放，也是當天下班後討論了很久的東西 接著我們就來回顧一下這八週我們都經歷了什麼哈哈 八週第一週練習主題： margin / padding 第一週的打底真的非常重要，雖然看似簡單的主題，但是對一些新手來說這絕對是常使用錯誤的前三名。也因為是第一週，有很多小細節要講，像是標籤使用是否正確以及符合語意化、學會看設計稿找出規範，這些到第八週依舊都是很重要的事，這也是我第一次直播的時候跟大家分享的內容。 另外我自己也在第一週學到 認識字體設定和 img 底下會留白這件事（到現在還是覺得很不可置信） Demo： https://yinmin8610.github.io/hexschool-webLayoutTraining/week1/ 本週的學習目標： 了解 box-model margin / padding 推擠方向一致 抽取共同 class （container 的使用） img 設定 display:block 的含義 文字與文字行高的關係 第二週練習主題： flex 作業不同於第一週全部垂直的排列，開始出現並排的呈現方式，可以練習最基本的 flex 語法。另外小任務是解 froggy 和 flex pirate ，可以幫助大家在很短的時間內熟悉 flex。 Demo：https://yinmin8610.github.io/hexschool-webLayoutTraining/week2/ 本週的學習目標： margin padding 和 flex 的搭配 使用 flex 的垂直水平置中語法 背景圖設定 第三週練習主題： RWD 這週版型困難以外還要碰一點點 jQuery ，加上初次接觸 RWD 的人應該覺得第三週是地獄吧！我記得版型難到前三天都沒人交作業XD (後來有交作業的真的要幫你們拍手），也因為這週的種種考驗，讓大家可以檢視自己前兩週的底子是否有打穩，面對複雜的版型如何去拆解等等 直播前幾天我也一直在回想自己當初學習 RWD 卡住的點是什麼，在直播前練習表達了好久，怕自己講的內容大家越聽越不懂（表達真的好難） 這週我也有一些小收穫，像是 img 在使用 flex 下無法正常縮放，目前找到兩種解決方法，第一個是在外層加 來限制圖片區塊範圍，第二是使用 CSS object-fit，另外還有 CSS filter 的使用 Demo：https://yinmin8610.github.io/hexschool-webLayoutTraining/week3/ 本週的學習目標： container 的使用（設定 max-width） RWD 的基礎觀念（單位 % 取代 px） media query 的使用 (max-width &amp; min-width 差別) 斷點與裝置尺寸的關係 第四週練習主題：多頁式 RWD 延續第三週版型，但是多加了三四頁內頁，這週又迎來新挑戰：使用 Gulp 編譯 ejs 和 SCSS，學生表示：「每週都在刷新三觀」 我在這之前完全沒用過 Gulp （只有接觸過一點 Webpack）趁這個機會來增加技能，另外也複習了 SCSS 重新了解設計模式 SMACSS / OOCSS / BEM 和命名規範，在學習前端一段時間後重新複習 SCSS 真的可以得到更深一層的體悟 本週的學習目標： Gulp 應用 拆分 layout 觀念 SCSS 注意階層過多問題、變數命名、檔案拆分可參考 7-1 pattern 第五週練習主題： Bootstrap 這週要做出六角的後台介面，主要使用 Bootstrap 搭配 SCSS，介面簡單讓初次接觸 Bootstrap 的人可以在這週先快速了解元件的使用方式 本週的學習目標： 熟悉 Bootstrap 元件使用 模組化的概念 SCSS 練習 表單內不同的狀態 第六週練習主題： 多頁式 Bootstrap 這週版型算蠻有挑戰性的，結合 Bootstrap 最大的特點響應式版型。俊儀的設計稿真的很多細節，常常看到中間就會想說這邊怎麼突然變這樣了XD 我自己覺得需要對 Bootstrap 有一定的熟悉度才能快速修改成自己要的樣式，在看 Bootstrap 文件時也可以學習到他的命名方式和結構，採用 OOCSS 的設計規範，容器與樣式分離的最佳典範，我也寫了一篇介紹 OOCSS 的文章 Demo：https://yinmin8610.github.io/hexschool-week6/ 本週的學習目標： 熟悉 Bootstrap 網格系統、元件組成、通用類別 (utilities) Bootstrap 斷點使用（從手機開始的開發方式） 第七週練習主題： 網頁特效 Ray 先前有用過 JS 和 jQuery 各寫出一個版本（完全沒用到套件超強～～）我也希望自己這週能不要靠套件完成，但還沒完成切版哈哈，之後再附上連結 本週的學習目標： 使用外部套件 AOS 第八週練習主題： 大型訂房網 這週設計稿有超過 20 頁，包含平板及手機版型，還有非常多特殊排版的應用，很值得大家練習 本週的學習目標： 元件模組化 利用 variables.scss 修改自己要的元件樣式 太多惹，結合以上 經歷了八週荼毒，大家可以再回去看自己第一週的 code，看著自己寫的東西如果會懷疑這真的是我寫的嗎？的心聲 ，那恭喜你 6600 花得非常值得，進步超多～～ 也恭喜完成八週的挑戰一起經歷這麼多苦難哈哈，雖然要說掰掰了有點捨不得，但是很開心能認識你們！","link":"/share/20200625/1099903927/"}],"tags":[{"name":"前端","slug":"前端","link":"/tags/%E5%89%8D%E7%AB%AF/"},{"name":"CSS","slug":"CSS","link":"/tags/CSS/"},{"name":"CSS 設計模式","slug":"CSS-設計模式","link":"/tags/CSS-%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/"},{"name":"flex","slug":"flex","link":"/tags/flex/"},{"name":"六角學院","slug":"六角學院","link":"/tags/%E5%85%AD%E8%A7%92%E5%AD%B8%E9%99%A2/"},{"name":"火箭隊培訓營","slug":"火箭隊培訓營","link":"/tags/%E7%81%AB%E7%AE%AD%E9%9A%8A%E5%9F%B9%E8%A8%93%E7%87%9F/"},{"name":"直播課程","slug":"直播課程","link":"/tags/%E7%9B%B4%E6%92%AD%E8%AA%B2%E7%A8%8B/"}],"categories":[{"name":"CSS","slug":"css","link":"/categories/css/"},{"name":"前端技術","slug":"f2e","link":"/categories/f2e/"},{"name":"分享","slug":"share","link":"/categories/share/"}]}