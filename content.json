{"pages":[],"posts":[{"title":"分享一個月內使用新技術完成作品-火箭隊培訓營","text":"我是穎旻，目前是快要大學畢業的學生，正在學習前端的漫漫長途中，你好你好！這是我的第一篇文章，我想分享自己待在高雄的工程師培訓營中經歷一個半月專案的實作過程。 前言火箭隊培訓營「火箭隊培訓營」是由 廖洧杰 和 Justin 兩位老師在高雄創辦的線下實體工程師培訓營，主要培育前後端人才，過程全程免費。當初知道有這個培訓營時覺得老師太佛心了！ 後來才知道原來其他地方也有人在做類似的事，像是在台南的好想工作室、台北的 AppWorks School 和 CMoney。只是每個培訓營最終的目的不一定相同，火箭隊最終是希望能協助轉職，所以在挑選人和規劃學員的學習路線時就會有一些不同。 目前火箭隊正在招募第五、六梯成員，如果有興趣的人們可以參考下面的資訊，錯過的話也可以先 follow FB 粉專 ，最新資訊都可以在這裡看到。 報名資訊報名時間：4/6～4/19 詳細資訊 我在火箭隊的生活通常學員會駐點學習至少半年，最終會產出一個面試作品。但我因為某些原因所以在最後一個月才加入，沒有參與到前半部面試和學習的過程，只有完成最終的作品，所以若想知道面試和學習過程，可以參考第一梯學員，宜蓁的文章。 此篇主要著重在作品的產生過程以及一個月內學習一項新技術的方法。 作品會讓前端與後端搭配一起完成，但因為我最慢進來，大家都已經有各自的夥伴了，於是我只好自己完成我的（哭）。 也因為我沒有後端，洧杰老師建議我可以使用 Json server 來快速建立簡單的 Rest API。 一開始想題目時，我從自己生活上的經驗去尋找靈感，一共想了五個。與老師討論過後，覺得自己對第一個比較有共鳴和想法，主題是線上租屋，於是 Homie 就這樣誕生啦～～！ 時程規劃在時程方面，進來的時間是2/10，得知 3/27 就要發表作品，大約有一個半月的時間。我花了將近兩週學習 Vue，一週做小練習。剩下的時間切分為三個階段，中後期著重在開發平台上。 新技術的學習方法在講學習一項新技術前，先說明一下這次專案使用的技術是前端框架 Vue。我在來火箭隊之前已經碰過大約半年的 React，也有一些開發經驗（之後可以分享兩者的差別，被問到爛了～～～），但我在學習的過程中覺得很挫折，主要是因為對 Javascript 的認識不夠深，於是學習到一半又重新看了六角學院的 Javascript 課程，所以這次在學習 Vue 時我就更重視自己學習的效果。在洧杰老師的我在火箭隊學到突破程式邏輯的四種方法（這篇很值得閱讀）的文中有提到，探索適合自己的學習吸收方式，沒辦法只透過一個教材就能夠解決學員全部的問題，複合式的學習方式才能根據每個人的能力去有效吸收內容。 主要的學習資源＋第二個輔助學習的資源＋實作 於是根據上面的方法，我也找出適合自己的學習模式。已經習慣看線上課程自學的我，選擇看六角的 Vue 課程來當作我主要學習的資源，另外一邊做筆記，在不懂的地方就會搭配一些相關主題的技術文章（輔助學習），有時候還能從別人的文章內學到更多呢！像我在看到 Component 元件的章節時就卡了一段時間，覺得懂了但又常常在看老師的程式碼時失去方向，後來參考了別人在 iT 邦幫忙鐵人賽分享的文章才又更了解 Vue 中元件傳遞的原理，最後透過實作 todolist 的方式驗證自己是否真的學會。或許用這樣的方法會讓學習過程很漫長，但是要真的學會不能只是「大略懂」，不然就會遭遇像我前面的慘痛經驗。或許會有人想知道要如何確定自己都學會了？答案真的就是透過實作。 實作的目的是了解自己學習和理解的內容是否有被正確應用，所以如果在實作過程中發現還是很卡的話，找出卡住的地方，再針對那部分加強就可以了:D 在時程上有限制時，我會訂定自己每週的學習目標，透過任何可以記錄的軟體都可以，這部分之前嘗試了很久才找到最適合自己訂定目標的方式，直接說重點就是： 目標不要一下訂得太大、越細節越好 每天都回報自己的進度來看能否符合這週的最終目標，若沒辦法的話該怎麼做調整 養成習慣後就成了我每天睡前要做的事。 學習新技術是很艱辛的過程，不斷在「碰壁」和「了解」中循環，但是當你有相對的作品產出時，就會覺得一切很值得，因為做出來的東西是自己辛苦的結晶，並且也能增加自己的信心去面對更難的挑戰，總之這次嘗試的學習方式，效果還不錯～ 總結短短一個半月學了很多新東西，一開始有些無法負荷，但現在慶幸有這些壓力可以逼迫自己不斷學習。在火箭隊，很喜歡的是大家會互相討論問題，一個人自學和大家一起學的感覺很不一樣，因為知道彼此都在相同的道路上，有問題都能夠互相幫忙互相加油，所以更有堅持下去的動力。恭喜大家最後都順利的畢業啦！ 然後想要特別感謝 Ray，在我一個人做專案的過程中幫助我許多，邏輯卡住時，教我怎麼整理自己的思緒，遇到程式碼跑不出來還怎麼看都找不到原因時，教我一步步 debug，分析有可能的問題，重點是你總是很耐心講到我真的聽懂（感動落淚），雖然最後免不了還是要嗆我一下 XD 但我在問你問題的過程中，我也學習到把問題講到你可以一次了解，也從你改善我的程式碼中學到不同的思維和寫法，每次問問題都像在挖寶哈哈哈。 最後，若是看完我的分享對這個工程師培訓營有興趣的人，歡迎你加入火箭隊！一起發射火箭吧～～ 祝福大家都能轉職成功:D 第二梯其他學員的文章參考 Daniel — 飛出火箭隊 集點送紅利 / Hiro — 從自學到火箭隊 - 網頁心路歷程","link":"/yinmin8610.github.io/share/20200403/1243066710/"},{"title":"Flex 修煉時光屋","text":"哈囉，我是穎旻！上個月有了一個新身份，就是我成為六角的助教了！如果有參與網頁切版直播課程的人應該會一直看到我的名字看了將近一個月的作業後也看出一些心得來，於是想和你們分享在 Flex 的作業中一些小細節和技巧，也有助於大家最近開始做的任務唷，有興趣的話就繼續看下去摟～ 排版的常見問題先來講講在看 Flex 修煉時光屋的作業時發現很多人會有的主要問題 把內容的高度寫死 123.content { height: 798px;} （然後就可以看到各種很奇怪的數字 但不難想像大家這樣做的原因，因為設計稿會有明確的 px，所以很多人就會依照設計稿的數字去做設定，不是說這樣不對，只是不是每個地方都能這樣做，常常會看到的問題是將整塊內容的高度寫死，為了讓下方有多餘的空間來讓畫面和設計稿看起來一致，但其實那些應該留白的區域不是透過設定固定高度跑出來的，正確應該是用 margin 和 padding 做推移，除了內容撐開的高度外，能讓多餘的空間產生出來 但當大家學會不要寫死高度開始使用 margin 和 padding 做推移時，又會看到下方的程式碼 想用 margin 或 padding 把目標移到各種位置 123.logo { padding: 224px 149px 267px;} 有寫過這種奇怪數字的人可以自首XD 而且不難想像還為了要對準，使用 f12 的工具狂加數字 通常會這樣寫遇到比較多是希望讓目標可以置中（但置中的方法這麼多就是不要這樣用R） 剛剛第一點最後有說到使用 margin 和 padding 的時機是讓多餘的空間產生出來，不是為了讓目標推移到你想要的位置去，如果是這樣的寫法在日後學 RWD 的時候就會發現怎麼寫都會跑版，還要花時間重寫，所以可以多使用 flex 去做這些排版，不要用推移的方式做出排版的效果唷～ 最後可能會出現第三種問題 我已經用 flex 做到置中，但是上下還是需要留白呀，那我可以寫死高度嗎？ 不行！不行！不行！很重要所以說三次 這樣其實只是回到第一個問題而已XD 如果要留白就使用 margin 或 padding 做推移吧！詳細應用可以參考下方 關卡 2 雙欄排版 的細節分享，正確使用 flex 搭配 padding 2.濫用 div 標籤 在關卡 1、3、4、5、7、9、10，都是可以使用 ul li 排版的，其中在關卡 3、4、7、10 中都是選單，這邊大家都會記得要用 ul li 結構很棒～～但是在關卡 1、5、9 的排版方式大家就會忘記可以使用 ul li 取代 div，這部分就是可以訓練大家在看設計稿時就先想架構，漸漸就能寫出符合語意的程式碼了另外還有遇到一種，知道要用 ul li 但外面又包了一層 div 123456&lt;div class=&quot;card-list&quot;&gt; &lt;ul&gt; &lt;li&gt;...&lt;/li&gt; &lt;li&gt;...&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt; 這樣使用 ul 在語意方面好像就沒什麼意義了，所以就會建議把 div 移除，然後把 class 屬性放在 ul 上。遵循標籤的語意化不但有利於網頁的 SEO，還有一個很大的優點就是讓過兩個月之後的你打開檔案還能看得出來自己當初在寫什麼。試想看看自己打開檔案後外層幾乎都是用 div 去包，於是只好透過 class 名稱推敲，會好好寫 class 名稱的人大概會出現像是 list 或 item 之類的字，但是如果還不太會命名的寫出來的就有各種可能，只會越看越混亂啊勞勞 這兩個問題是每天看作業時都會遇到的，其實在剛接觸網頁的人都一定寫過類似的程式碼（我自己也寫過哈哈哈），但透過老師和各位助教的指導就可以加速觀念的吸收，幫助各位寫出更棒的程式碼喔～～ 關卡細節分享看完常見問題後，大家應該都很有共鳴吧！！接著要來分享關卡 2～4 中你可能沒注意到的小細節 關卡 2 雙欄排版在這關就可以呼應上方的兩個問題，看圖可以發現兩個重點 兩塊都有上下的留白空間 左邊區塊的內容要置中 這裡很多人會為了製造留白空間所以寫死高度，但是會比較建議在右邊的區塊使用 padding 去推 這時候可能會有人想問，為什麼是選擇只推右邊區塊？ 先說明外層有使用 flex 讓兩塊並排，所以兩塊都會有等高的效果，然後因為右邊區塊的內容是文字，在文字使用 padding 的話可以確定文字間距是固定的，當上下都推出適當的高度後，左邊的區塊就會依照右邊的高度去做到等高，解決高度問題後，接下來就是左邊區塊的內容要置中 可以使用 flex 垂直水平置中的方法 123display: flex;justify-content: center;align-items: center; 這裡可以參考葉子的範例程式碼，在關卡 8 也是使用類似的觀念 關卡 3 雙欄選單設計這關想分享的是 menu 區塊 — 兩種置中方法 照理來說這塊因為是垂直排列，所以不會用到 flex，很多人會直接使用 text-align: center ，但有個問題是最後一個 li 不像前三個都是四個字，所以用 text-align: center 只有他不會呈現靠左對齊，為了讓 ul 整塊置中還要讓文字使用預設的靠左對齊 (不使用 center)，利用 flex 可以輕鬆做到 12345.menu { display: flex; flex-direction: column; align-items: center;} 不過也有不使用 flex 的置中方式 1234.menu ul { margin: 0 auto; width: 50%;} 關卡 4 表頭表尾設計這關想分享的是上方的 menu 區塊 — 四個 a 連結產生間距的方法這邊要注意的是 .menu 可以靠內容和 padding 撐開，不要寫死高度 在 .menu 使用 flex-wrap:wrap 可以讓畫面縮小時不要跑版 Codepen 示範連結 第一種方式：設定 li 的寬度並在 a 標籤中使用 text-align:center 第二種方式：li+li 的方式，可以在每個 li 後面使用 margin-left 推移 第三種方式：在 a 標籤中使用 padding 把左右間距推開 學員作業分享有學員提到說寫完後有再去參考別人的作業，但是量實在太多了不知道要看誰的比較好所以我就來分享兩個我目前看完覺得寫得還不錯的作業，我會列出他們的優點給大家參考～ 網頁連結 1.徐純純 （使用 pug + sass）2.Alen Su 優點： flex 寫得不錯 HTML 結構寫得不錯 命名有規劃 會把重複性高的 CSS 整理在一起 有做細節處理 例如：hover 樣式 畫面還原度高 CSS 都有按照名稱順序排列，讓我在看作業的時候很方便對照 (感動) 另外也蠻喜歡學員針對我提供的建議給我一些回饋或再次發問，因為我給的建議不一定每次都是最正確的，如果能夠提供你為什麼這樣做的方法，我們或許可以討論出更好的寫法，這樣對我來說也可以學到不同的思維，在後面就能提供給其他學員參考了～ 總結如果還有其他關卡想看細節分享的，可以再留言告訴我喔～ 或是你有更好的想法也歡迎在 slack 上一起討論！ 建議大家在開始寫之前可以先去參考已完成任務的人的作業建議，好處是可以避免去犯和其他人同樣的錯誤，這樣助教和老師可以更專注在其他細節上，或許能夠給你更多不同的建議哩 最後最後，切版直播班的第一週任務開始啦～幫大家加油！！希望這篇文章有幫助到你～","link":"/yinmin8610.github.io/f2e/20200412/393573562/"}],"tags":[{"name":"前端","slug":"前端","link":"/yinmin8610.github.io/tags/%E5%89%8D%E7%AB%AF/"},{"name":"火箭隊培訓營","slug":"火箭隊培訓營","link":"/yinmin8610.github.io/tags/%E7%81%AB%E7%AE%AD%E9%9A%8A%E5%9F%B9%E8%A8%93%E7%87%9F/"},{"name":"六角學院","slug":"六角學院","link":"/yinmin8610.github.io/tags/%E5%85%AD%E8%A7%92%E5%AD%B8%E9%99%A2/"},{"name":"flex","slug":"flex","link":"/yinmin8610.github.io/tags/flex/"}],"categories":[{"name":"分享","slug":"share","link":"/yinmin8610.github.io/categories/share/"},{"name":"前端技術","slug":"f2e","link":"/yinmin8610.github.io/categories/f2e/"}]}